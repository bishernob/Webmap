{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/map/src/LocationGrid.js\",\n  _s = $RefreshSig$();\n// LocationGrid.js\nimport React, { useState } from \"react\";\nimport \"./LocationGrid.css\";\nimport Map from \"./Maps\";\nimport LocationTable from \"./LocationTable\";\nimport ModalForm from './ModalForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationGrid = () => {\n  _s();\n  // Sample data for multiple rows\n\n  // const [rows, setRows] = useState([]);\n\n  const [locations, setLocations] = useState([{\n    name: \"Location 1\",\n    notes: \"Notes 1\",\n    lat: 48.86,\n    lng: 2.3322\n  }, {\n    name: \"Location 2\",\n    notes: \"Notes 2\",\n    lat: 48.85,\n    lng: 2.3322\n  }, {\n    name: \"Location 3\",\n    notes: \"Notes 3\",\n    lat: 48.855,\n    lng: 2.34\n  }]);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const handleAddLocation = newLocation => {\n    setLocations([...locations, newLocation]);\n    setIsFormOpen(false); // Close the form after adding a location\n  };\n  // const [formData, setFormData] = useState({\n  //   name: \"\",\n  //   lat: \"\",\n  //   lng: \"\",\n  // });\n\n  // const [formErrors, setFormErrors] = useState({\n  //   name: \"\",\n  //   lat: \"\",\n  //   lng: \"\",\n  // });\n\n  // const handleInputChange = (e) => {\n  //   const { name, value } = e.target;\n  //   if (!formData.name || !formData.lat || !formData.lng) {\n  //     setFormErrors({ ...formErrors, name: \"Name is required\" });\n  //     return;\n  //   }\n  //   setFormData({ ...formData, [name]: value });\n  // };\n\n  // const handleEditLocation = (index) => {\n  //   // Add your logic to open a modal or form to edit location details\n  //   // Then, update the location in the locations array\n  //   const editedLocation = { ...locations[index], name: \"Edited Location\" };\n  //   const updatedLocations = [...locations];\n  //   updatedLocations[index] = editedLocation;\n  //   setLocations(updatedLocations);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        sampleData: locations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right\",\n      children: /*#__PURE__*/_jsxDEV(LocationTable, {\n        locations: locations,\n        setIsFormOpen: setIsFormOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), isFormOpen && /*#__PURE__*/_jsxDEV(ModalForm, {\n      onAddLocation: handleAddLocation,\n      setIsFormOpen: setIsFormOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationGrid, \"gtQCaTtnwOtzOLolZ/la8xUbg0c=\");\n_c = LocationGrid;\nexport default LocationGrid;\n\n//   useEffect(() => {\n//     console.log(\"before fetch\");\n//     fetch(\"http://localhost:7147/api/Location\", {\n//       method: \"GET\", // or 'POST', 'PUT', etc.\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         // Add any other headers if needed\n//       },\n//     })\n//       .then((response) => {\n//         console.log(\"after fetch\", response);\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => console.log(data))\n//       .catch((error) => console.error(\"Fetch error:\", error));\n//   }, []);\n\n//   const [locations, setLocations] = useState([]);\n\n// {locations.map((location) => (\n//   <tr key={location.id}>\n//     <td>{location.id}</td>\n//     <td>{location.name}</td>\n//     <td>{location.notes}</td>\n//     <td>{location.lat}</td>\n//     <td>{location.lng}</td>\n//   </tr>\n// ))}\nvar _c;\n$RefreshReg$(_c, \"LocationGrid\");","map":{"version":3,"names":["React","useState","Map","LocationTable","ModalForm","jsxDEV","_jsxDEV","LocationGrid","_s","locations","setLocations","name","notes","lat","lng","isFormOpen","setIsFormOpen","toggleForm","handleAddLocation","newLocation","className","children","sampleData","fileName","_jsxFileName","lineNumber","columnNumber","onAddLocation","_c","$RefreshReg$"],"sources":["/Users/macbookpro/Documents/map/src/LocationGrid.js"],"sourcesContent":["// LocationGrid.js\nimport React, { useState } from \"react\";\nimport \"./LocationGrid.css\";\nimport Map from \"./Maps\";\nimport LocationTable from \"./LocationTable\";\nimport ModalForm from './ModalForm';\n\nconst LocationGrid = () => {\n  // Sample data for multiple rows\n\n  // const [rows, setRows] = useState([]);\n\n  const [locations, setLocations] = useState([\n    { name: \"Location 1\", notes: \"Notes 1\", lat: 48.86, lng: 2.3322 },\n    { name: \"Location 2\", notes: \"Notes 2\", lat: 48.85, lng: 2.3322 },\n    { name: \"Location 3\", notes: \"Notes 3\", lat: 48.855, lng: 2.34 },\n  ]);\n\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const handleAddLocation = (newLocation) => {\n    setLocations([...locations, newLocation]);\n    setIsFormOpen(false); // Close the form after adding a location\n  };\n  // const [formData, setFormData] = useState({\n  //   name: \"\",\n  //   lat: \"\",\n  //   lng: \"\",\n  // });\n\n  // const [formErrors, setFormErrors] = useState({\n  //   name: \"\",\n  //   lat: \"\",\n  //   lng: \"\",\n  // });\n\n  // const handleInputChange = (e) => {\n  //   const { name, value } = e.target;\n  //   if (!formData.name || !formData.lat || !formData.lng) {\n  //     setFormErrors({ ...formErrors, name: \"Name is required\" });\n  //     return;\n  //   }\n  //   setFormData({ ...formData, [name]: value });\n  // };\n\n  // const handleEditLocation = (index) => {\n  //   // Add your logic to open a modal or form to edit location details\n  //   // Then, update the location in the locations array\n  //   const editedLocation = { ...locations[index], name: \"Edited Location\" };\n  //   const updatedLocations = [...locations];\n  //   updatedLocations[index] = editedLocation;\n  //   setLocations(updatedLocations);\n  // };\n\n  return (\n    <div className=\"container\">\n      <div className=\"left\">\n        <Map sampleData={locations} />\n      </div>\n      <div className=\"right\">\n      <LocationTable locations={locations} setIsFormOpen={setIsFormOpen}/>\n      </div>\n      {isFormOpen && <ModalForm onAddLocation={handleAddLocation} setIsFormOpen={setIsFormOpen}/>}\n      {/* <input\n        type=\"text\"\n        name=\"name\"\n        value={formData.name}\n        onChange={handleInputChange}\n      />\n      {formErrors.name && <span className=\"error\">{formErrors.name}</span>} */}\n    </div>\n  );\n};\n\nexport default LocationGrid;\n\n//   useEffect(() => {\n//     console.log(\"before fetch\");\n//     fetch(\"http://localhost:7147/api/Location\", {\n//       method: \"GET\", // or 'POST', 'PUT', etc.\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         // Add any other headers if needed\n//       },\n//     })\n//       .then((response) => {\n//         console.log(\"after fetch\", response);\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((data) => console.log(data))\n//       .catch((error) => console.error(\"Fetch error:\", error));\n//   }, []);\n\n//   const [locations, setLocations] = useState([]);\n\n// {locations.map((location) => (\n//   <tr key={location.id}>\n//     <td>{location.id}</td>\n//     <td>{location.name}</td>\n//     <td>{location.notes}</td>\n//     <td>{location.lat}</td>\n//     <td>{location.lng}</td>\n//   </tr>\n// ))}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,oBAAoB;AAC3B,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;;EAEA;;EAEA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,CACzC;IAAEU,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE,SAAS;IAAEC,GAAG,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAO,CAAC,EACjE;IAAEH,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE,SAAS;IAAEC,GAAG,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAO,CAAC,EACjE;IAAEH,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE,SAAS;IAAEC,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAK,CAAC,CACjE,CAAC;EAEF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMgB,UAAU,GAAGA,CAAA,KAAM;IACvBD,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EACD,MAAMG,iBAAiB,GAAIC,WAAW,IAAK;IACzCT,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEU,WAAW,CAAC,CAAC;IACzCH,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC;EACD;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEV,OAAA;IAAKc,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBf,OAAA;MAAKc,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBf,OAAA,CAACJ,GAAG;QAACoB,UAAU,EAAEb;MAAU;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACNpB,OAAA;MAAKc,SAAS,EAAC,OAAO;MAAAC,QAAA,eACtBf,OAAA,CAACH,aAAa;QAACM,SAAS,EAAEA,SAAU;QAACO,aAAa,EAAEA;MAAc;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,EACLX,UAAU,iBAAIT,OAAA,CAACF,SAAS;MAACuB,aAAa,EAAET,iBAAkB;MAACF,aAAa,EAAEA;IAAc;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQxF,CAAC;AAEV,CAAC;AAAClB,EAAA,CApEID,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAsElB,eAAeA,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}